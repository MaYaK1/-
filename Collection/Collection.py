# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Acer\Desktop\Collection_new\generating_a_dictionary.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, os, ctypes, string, itertools, datetime, threading, hashlib, _pystribog, binascii, pyperclip
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog
from PyQt5.QtGui import  QIntValidator, QRegExpValidator
from PyQt5.QtCore import QRegExp
from PyQt5.QtCore import QThread, pyqtSignal
from itertools import product

class generating_dictionary(QThread):
    countChanged = pyqtSignal(str)
    def __init__(self, mainwindow, parrent=None):
        super().__init__()
        self.mainwindow = mainwindow


    def run(self):
        if not self.mainwindow.checkBox_ABC.isChecked() and not self.mainwindow.checkBox_abc.isChecked() and not self.mainwindow.checkBox_123.isChecked() and not self.mainwindow.checkBox_symbols.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один алфавит. Для работы с генератором словаря выберите хотя бы один алфавит.", "Ошибка!", 0)
        elif self.mainwindow.lineEdit_ABC.text() == "" and self.mainwindow.lineEdit_abc.text() == "" and self.mainwindow.lineEdit_123.text() == "" and self.mainwindow.lineEdit_symbols.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Списки алфавитов пусты. Для работы с генератором словаря заполните хотя бы один список алфавита.", "Ошибка!", 0)
        elif self.mainwindow.comboBox_customize_the_length.currentIndex() == 0 and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один параметр для выбора длины вариантов слов. Для работы с генератором словаря выберите хотя бы один параметр для длины вариантов слов.", "Ошибка!", 0)
        elif int(self.mainwindow.spinBox_ot.value()) > int(self.mainwindow.spinBox_do.value()) and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Некорректно заполнен диапазон количества символов!", "Ошибка!", 0)
        elif self.mainwindow.comboBox_customize_the_length.currentIndex() == 2 and not self.mainwindow.checkBox_top_1.isChecked() and not self.mainwindow.checkBox_top_2.isChecked() and not self.mainwindow.checkBox_top_3.isChecked() and not self.mainwindow.checkBox_top_4.isChecked() and not self.mainwindow.checkBox_top_5.isChecked() and not self.mainwindow.checkBox_top_6.isChecked() and not self.mainwindow.checkBox_top_7.isChecked() and not self.mainwindow.checkBox_top_8.isChecked() and not self.mainwindow.checkBox_top_9.isChecked() and not self.mainwindow.checkBox_top_10.isChecked() and not self.mainwindow.checkBox_top_11.isChecked() and not self.mainwindow.checkBox_top_12.isChecked() and not self.mainwindow.checkBox_top_13.isChecked() and not self.mainwindow.checkBox_top_14.isChecked() and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбрана ни одна популярная длина для составления вариантов слов. Для работы с генератором словаря выберите хотя бы одну популярную длину для составления варантов слов.", "Ошибка!", 0)
        elif not self.mainwindow.checkBox_alphabet_symbols.isChecked() and not self.mainwindow.checkBox_bigramm.isChecked() and not self.mainwindow.checkBox_position_symbols.isChecked() and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один режим работы генератора. Для работы с генератором словаря выберите режим работы генератора.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_bigramm.isChecked() and self.mainwindow.spinBox_bigramm.value() == 0:
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по биграммам не указано ни одного значения для количества используемых биграмм.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_mask.isChecked() and self.mainwindow.lineEdit.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по маске не указано входных данных.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_mask_alp.isChecked() and self.mainwindow.lineEdit_alp.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по маске не указан приоритет использования алфавитов.", "Ошибка!", 0)
        else:
################################################################################ Маски ################################################################################
            if ui.checkBox_mask.isChecked():
                ui.textEdit_Console.append("Идет процесс генерации словаря...")

                mappA = ui.lineEdit_ABC.text()
                mappa = ui.lineEdit_abc.text()
                mapp1 = ui.lineEdit_123.text()
                mappsym = ui.lineEdit_symbols.text()

                inputmask = ui.lineEdit_alp.text()

                if len(inputmask) / 3 == 1:
                    if inputmask[0:3] == '123':
                        alphabet = mapp1
                    elif inputmask[0:3] == 'ABC':
                        alphabet = mappA
                    elif inputmask[0:3] == 'abc':
                        alphabet = mappa
                    elif inputmask[0:3] == '#$!':
                        alphabet = mappsym
                    elif inputmask == 'all':
                        alphabet = mappA + mappa + mapp1 + mappsym
                    else:
                        alphabet = ''
                        ui.textEdit_Console.append('Ошибка введенных данных')
                        ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных", "Ошибка!", 0)
                elif len(inputmask) / 3 == 2:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных", "Ошибка!", 0)
                elif len(inputmask) / 3 == 3:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12] or inputmask[3:6] == inputmask[6:9] or inputmask[3:6] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        if inputmask[6:9] == '123':
                            alphabet += mapp1
                        elif inputmask[6:9] == 'ABC':
                            alphabet += mappA
                        elif inputmask[6:9] == 'abc':
                            alphabet += mappa
                        elif inputmask[6:9] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных!", "Ошибка!", 0)
                elif len(inputmask) / 3 == 4:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12] or inputmask[3:6] == inputmask[6:9] or inputmask[3:6] == inputmask[9:12] or inputmask[6:9] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        if inputmask[6:9] == '123':
                            alphabet += mapp1
                        elif inputmask[6:9] == 'ABC':
                            alphabet += mappA
                        elif inputmask[6:9] == 'abc':
                            alphabet += mappa
                        elif inputmask[6:9] == '#$!':
                            alphabet += mappsym
                        if inputmask[9:12] == '123':
                            alphabet += mapp1
                        elif inputmask[9:12] == 'ABC':
                            alphabet += mappA
                        elif inputmask[9:12] == 'abc':
                            alphabet += mappa
                        elif inputmask[9:12] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных!", "Ошибка!", 0)
                else:
                    alphabet = ''
                    ui.textEdit_Console.append('Проверьте правильность заполнения маски')
                    ctypes.windll.user32.MessageBoxW(0, "Проверьте правильность заполнения маски!", "Ошибка!", 0)
                
                hsh = ui.lineEdit_hash.text()
                
                pass_mask = ui.lineEdit.text()
                pwd_pat = pass_mask.replace('{', '{{').replace('}','}}').replace('*', '{}')
                N = pass_mask.count('*')
                file = open ("dictionary\\mask " + str(datetime.datetime.now().strftime('%Y.%m.%d_%H.%M.%S'))  + ".txt", 'w')
                i = 0
                for chars in product(alphabet, repeat=N):
                    summ = pow(len(alphabet), N)
                    i += 1
                    if i % 1000000 == 0:
                        ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                    file.write("%s\n" % (''.join(pwd_pat.format(*chars))))
                ctypes.windll.user32.MessageBoxW(0, "Словарь составлен! Количество вариантов: " + str(summ) , "Успех!", 0)
                file.close()

class generator(QThread):
    countChanged_2 = pyqtSignal(str)
    def __init__(self, mainwindow, parrent=None):
        super().__init__()
        self.mainwindow = mainwindow

    def run(self):
        if not self.mainwindow.checkBox_ABC.isChecked() and not self.mainwindow.checkBox_abc.isChecked() and not self.mainwindow.checkBox_123.isChecked() and not self.mainwindow.checkBox_symbols.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один алфавит. Для работы с генератором словаря выберите хотя бы один алфавит.", "Ошибка!", 0)
        elif self.mainwindow.lineEdit_ABC.text() == "" and self.mainwindow.lineEdit_abc.text() == "" and self.mainwindow.lineEdit_123.text() == "" and self.mainwindow.lineEdit_symbols.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Списки алфавитов пусты. Для работы с генератором словаря заполните хотя бы один список алфавита.", "Ошибка!", 0)
        elif self.mainwindow.comboBox_customize_the_length.currentIndex() == 0 and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один параметр для выбора длины вариантов слов. Для работы с генератором словаря выберите хотя бы один параметр для длины вариантов слов.", "Ошибка!", 0)
        elif int(self.mainwindow.spinBox_ot.value()) > int(self.mainwindow.spinBox_do.value()) and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Некорректно заполнен диапазон количества символов!", "Ошибка!", 0)
        elif self.mainwindow.comboBox_customize_the_length.currentIndex() == 2 and not self.mainwindow.checkBox_top_1.isChecked() and not self.mainwindow.checkBox_top_2.isChecked() and not self.mainwindow.checkBox_top_3.isChecked() and not self.mainwindow.checkBox_top_4.isChecked() and not self.mainwindow.checkBox_top_5.isChecked() and not self.mainwindow.checkBox_top_6.isChecked() and not self.mainwindow.checkBox_top_7.isChecked() and not self.mainwindow.checkBox_top_8.isChecked() and not self.mainwindow.checkBox_top_9.isChecked() and not self.mainwindow.checkBox_top_10.isChecked() and not self.mainwindow.checkBox_top_11.isChecked() and not self.mainwindow.checkBox_top_12.isChecked() and not self.mainwindow.checkBox_top_13.isChecked() and not self.mainwindow.checkBox_top_14.isChecked() and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбрана ни одна популярная длина для составления вариантов слов. Для работы с генератором словаря выберите хотя бы одну популярную длину для составления варантов слов.", "Ошибка!", 0)
        elif not self.mainwindow.checkBox_alphabet_symbols.isChecked() and not self.mainwindow.checkBox_bigramm.isChecked() and not self.mainwindow.checkBox_position_symbols.isChecked() and not self.mainwindow.checkBox_mask.isChecked():
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один режим работы генератора. Для работы с генератором словаря выберите режим работы генератора.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_bigramm.isChecked() and self.mainwindow.spinBox_bigramm.value() == 0:
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по биграммам не указано ни одного значения для количества используемых биграмм.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_mask.isChecked() and self.mainwindow.lineEdit.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по маске не указано входных данных.", "Ошибка!", 0)
        elif self.mainwindow.checkBox_mask_alp.isChecked() and self.mainwindow.lineEdit_alp.text() == "":
            ctypes.windll.user32.MessageBoxW(0, "Для работы в режиме генерации словаря по маске не указан приоритет использования алфавитов.", "Ошибка!", 0)
        elif ui.lineEdit_hash.text() == "":
            ui.textEdit_Console.append('Поле значения хеш функции пустое')
            ctypes.windll.user32.MessageBoxW(0, "Поле значения хеш функции пустое!", "Ошибка!", 0)
        elif not ui.radioButton_md5.isChecked() and not ui.radioButton_sha1.isChecked() and not ui.radioButton_sha256.isChecked() and not ui.radioButton_sha512.isChecked() and not ui.radioButton_stribog.isChecked():
            ui.textEdit_Console.append('Не выбран ни один алгоритм хеширования из предложенных. Выберите алгоритм хеширования и повторите попытку')
            ctypes.windll.user32.MessageBoxW(0, "Не выбран ни один алгоритм хеширования из предложенных. Выберите алгоритм хеширования и повторите попытку!", "Ошибка!", 0)
        elif ui.radioButton_md5.isChecked() and len(ui.lineEdit_hash.text()) != 32:
            ui.textEdit_Console.append('Для алгоритма md5 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения')
            ctypes.windll.user32.MessageBoxW(0, "Для алгоритма md5 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения!", "Ошибка!", 0)
        elif ui.radioButton_sha1.isChecked() and len(ui.lineEdit_hash.text()) != 40:
            ui.textEdit_Console.append('Для алгоритма sha1 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения')
            ctypes.windll.user32.MessageBoxW(0, "Для алгоритма sha1 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения!", "Ошибка!", 0)
        elif ui.radioButton_sha256.isChecked() and len(ui.lineEdit_hash.text()) != 64:
            ui.textEdit_Console.append('Для алгоритма sha256 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения')
            ctypes.windll.user32.MessageBoxW(0, "Для алгоритма sha256 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения!", "Ошибка!", 0)
        elif ui.radioButton_sha512.isChecked() and len(ui.lineEdit_hash.text()) != 128:
            ui.textEdit_Console.append('Для алгоритма sha512 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения')
            ctypes.windll.user32.MessageBoxW(0, "Для алгоритма sha512 введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения!", "Ошибка!", 0)
        elif ui.radioButton_stribog.isChecked() and len(ui.lineEdit_hash.text()) != 128:
            ui.textEdit_Console.append('Для алгоритма Stribog введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения')
            ctypes.windll.user32.MessageBoxW(0, "Для алгоритма Stribog введено некорректное значение хеш-функции. Проверьте правильность заполнения поля для ввода хеш-значения!", "Ошибка!", 0)
        else:

################################################################################ Маски ################################################################################
            
            if ui.checkBox_mask.isChecked() and ui.checkBox_mask_alp.isChecked(): 
                ui.textEdit_Console.append("Идет процесс взлома пароля...")
                ui.textEdit_Console.append(str(datetime.datetime.now()))
                mappA = ui.lineEdit_ABC.text()
                mappa = ui.lineEdit_abc.text()
                mapp1 = ui.lineEdit_123.text()
                mappsym = ui.lineEdit_symbols.text()

                inputmask = ui.lineEdit_alp.text()

                if len(inputmask) / 3 == 1:
                    if inputmask[0:3] == '123':
                        alphabet = mapp1
                    elif inputmask[0:3] == 'ABC':
                        alphabet = mappA
                    elif inputmask[0:3] == 'abc':
                        alphabet = mappa
                    elif inputmask[0:3] == '#$!':
                        alphabet = mappsym
                    elif inputmask == 'all':
                        alphabet = mappA + mappa + mapp1 + mappsym
                    else:
                        alphabet = ''
                        ui.textEdit_Console.append('Ошибка введенных данных')
                        ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных", "Ошибка!", 0)
                elif len(inputmask) / 3 == 2:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных", "Ошибка!", 0)
                elif len(inputmask) / 3 == 3:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12] or inputmask[3:6] == inputmask[6:9] or inputmask[3:6] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        if inputmask[6:9] == '123':
                            alphabet += mapp1
                        elif inputmask[6:9] == 'ABC':
                            alphabet += mappA
                        elif inputmask[6:9] == 'abc':
                            alphabet += mappa
                        elif inputmask[6:9] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных!", "Ошибка!", 0)
                elif len(inputmask) / 3 == 4:
                    if inputmask[0:3] == inputmask[3:6] or inputmask[0:3] == inputmask[6:9] or inputmask[0:3] == inputmask[9:12] or inputmask[3:6] == inputmask[6:9] or inputmask[3:6] == inputmask[9:12] or inputmask[6:9] == inputmask[9:12]:
                        ui.textEdit_Console.append('Некоторые алфавиты повторяются!')
                        ctypes.windll.user32.MessageBoxW(0, "Некоторые алфавиты повторяются!", "Ошибка!", 0)
                        alphabet = ''
                    else:
                        if inputmask[0:3] == '123':
                            alphabet = mapp1
                        elif inputmask[0:3] == 'ABC':
                            alphabet = mappA
                        elif inputmask[0:3] == 'abc':
                            alphabet = mappa
                        elif inputmask[0:3] == '#$!':
                            alphabet = mappsym
                        if inputmask[3:6] == '123':
                            alphabet += mapp1
                        elif inputmask[3:6] == 'ABC':
                            alphabet += mappA
                        elif inputmask[3:6] == 'abc':
                            alphabet += mappa
                        elif inputmask[3:6] == '#$!':
                            alphabet += mappsym
                        if inputmask[6:9] == '123':
                            alphabet += mapp1
                        elif inputmask[6:9] == 'ABC':
                            alphabet += mappA
                        elif inputmask[6:9] == 'abc':
                            alphabet += mappa
                        elif inputmask[6:9] == '#$!':
                            alphabet += mappsym
                        if inputmask[9:12] == '123':
                            alphabet += mapp1
                        elif inputmask[9:12] == 'ABC':
                            alphabet += mappA
                        elif inputmask[9:12] == 'abc':
                            alphabet += mappa
                        elif inputmask[9:12] == '#$!':
                            alphabet += mappsym
                        else:
                            alphabet = ''
                            ui.textEdit_Console.append('Ошибка введенных данных')
                            ctypes.windll.user32.MessageBoxW(0, "Ошибка введенных данных!", "Ошибка!", 0)
                else:
                    alphabet = ''
                    ui.textEdit_Console.append('Проверьте правильность заполнения маски')
                    ctypes.windll.user32.MessageBoxW(0, "Проверьте правильность заполнения маски!", "Ошибка!", 0)
                if ui.lineEdit_hash.text() == "":
                    ui.textEdit_Console.append('Поле значения хеш функции пустое')
                    ctypes.windll.user32.MessageBoxW(0, "Поле значения хеш функции пустое!", "Ошибка!", 0)

                hsh = ui.lineEdit_hash.text()
                pass_mask = ui.lineEdit.text()
                pwd_pat = pass_mask.replace('{', '{{').replace('}','}}').replace('*', '{}')
                N = pass_mask.count('*')
                i = 0
                prom = 0

################################################################################ Маски md5 ################################################################################
                
                if ui.radioButton_md5.isChecked():
                    ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                    for chars in product(alphabet, repeat=N):
                        summ = pow(len(alphabet), N)
                        i += 1
                        prom += 1
                        if i % 1000000 == 0:
                            ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                        if hsh == hashlib.md5(pwd_pat.format(*chars).encode()).hexdigest():
                            ui.textEdit_Console.append('Последняя итерация: {}'.format(i))
                            ui.textEdit_Console.append('Искомый пароль: ' + pwd_pat.format(*chars))
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                            break
                    prom += 1
                    if prom > summ:
                        ui.textEdit_Console.append(str(datetime.datetime.now()))
                        ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                        ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')


################################################################################ Маски sha1 ################################################################################
                
                if ui.radioButton_sha1.isChecked():
                    ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                    for chars in product(alphabet, repeat=N):
                        summ = pow(len(alphabet), N)
                        i += 1
                        prom += 1
                        if i % 1000000 == 0:
                            ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                        if hsh == hashlib.sha1(pwd_pat.format(*chars).encode()).hexdigest():
                            ui.textEdit_Console.append('Последняя итерация: {}'.format(i))
                            ui.textEdit_Console.append('Искомый пароль: ' + pwd_pat.format(*chars))
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                            break
                    prom += 1
                    if prom > summ:
                        ui.textEdit_Console.append(str(datetime.datetime.now()))
                        ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                        ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')


################################################################################ Маски sha256 ################################################################################
                
                if ui.radioButton_sha256.isChecked():
                    ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                    for chars in product(alphabet, repeat=N):
                        summ = pow(len(alphabet), N)
                        i += 1
                        prom += 1
                        if i % 1000000 == 0:
                            ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                        if hsh == hashlib.sha256(pwd_pat.format(*chars).encode()).hexdigest():
                            ui.textEdit_Console.append('Последняя итерация: {}'.format(i))
                            ui.textEdit_Console.append('Искомый пароль: ' + pwd_pat.format(*chars))
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                            break
                    prom += 1
                    if prom > summ:
                        ui.textEdit_Console.append(str(datetime.datetime.now()))
                        ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                        ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Маски sha512 ################################################################################
                
                if ui.radioButton_sha512.isChecked():
                    ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                    for chars in product(alphabet, repeat=N):
                        summ = pow(len(alphabet), N)
                        i += 1
                        prom += 1
                        if i % 1000000 == 0:
                            ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                        if hsh == hashlib.sha512(pwd_pat.format(*chars).encode()).hexdigest():
                            ui.textEdit_Console.append('Последняя итерация: {}'.format(i))
                            ui.textEdit_Console.append('Искомый пароль: ' + pwd_pat.format(*chars))
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                            break
                    prom += 1
                    if prom > summ:
                        ui.textEdit_Console.append(str(datetime.datetime.now()))
                        ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                        ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Маски Stribog ################################################################################
                
                if ui.radioButton_stribog.isChecked():
                    ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                    for chars in product(alphabet, repeat=N):
                        summ = pow(len(alphabet), N)
                        i += 1
                        prom += 1
                        if i % 1000000 == 0:
                            ui.textEdit_Console.append('Итерация: {}'.format(i) + ' из ' + str(summ))
                        h = _pystribog.StribogHash(_pystribog.Hash512)
                        h_update = h.update(str(''.join(chars)))
                        res = binascii.hexlify(h.digest()).decode('utf-8')
                        if hsh == res:
                            ui.textEdit_Console.append('Последняя итерация: {}'.format(i))
                            ui.textEdit_Console.append('Искомый пароль: ' + pwd_pat.format(*chars))
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                            break
                    prom += 1
                    if prom > summ:
                        ui.textEdit_Console.append(str(datetime.datetime.now()))
                        ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                        ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
            
################################################################################ Биграммы ################################################################################
            
            elif ui.checkBox_bigramm.isChecked() and ui.spinBox_bigramm.value() != 0:
                ui.textEdit_Console.append("Идет процесс взлома пароля...")
                ABC = self.mainwindow.lineEdit_ABC.text()
                abc = self.mainwindow.lineEdit_abc.text()
                numbers = self.mainwindow.lineEdit_123.text()
                symbols = self.mainwindow.lineEdit_symbols.text()
                total_sum_length = len(self.mainwindow.lineEdit_ABC.text()) + len(self.mainwindow.lineEdit_abc.text()) + len (self.mainwindow.lineEdit_123.text()) + len(self.mainwindow.lineEdit_symbols.text())
                if self.mainwindow.comboBox_customize_the_length.currentIndex() == 1:
                    min_symbols = self.mainwindow.spinBox_ot.value()
                    max_symbols = self.mainwindow.spinBox_do.value()
                    flag = False
                    total = 0
                    kolvo = 0
                    for i in range (min_symbols,max_symbols+1,1):
                        total = sum(total_sum_length ** ii for ii in range(min_symbols,max_symbols+1,1))

################################################################################ Биграммы. Диапазон длин. Md5 ################################################################################
                        
                        if ui.radioButton_md5.isChecked():
                            ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.md5(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_md5.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Биграммы. Диапазон длин. SHA1 ################################################################################
                        
                        if ui.radioButton_sha1.isChecked():
                            ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha1(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha1.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Биграммы. Диапазон длин. SHA256 ################################################################################
                        
                        if ui.radioButton_sha256.isChecked():
                            ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha256(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha256.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Биграммы. Диапазон длин. SHA512 ################################################################################
                        
                        if ui.radioButton_sha512.isChecked():
                            ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha512(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha512.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Биграммы. Диапазон длин. Stribog ################################################################################
                        
                        if ui.radioButton_stribog.isChecked():
                            ui.textEdit_Console.append('Общее время выполнения: ~' + str(round(pow(len(alphabet), N)/800000, 1)) + ' секунд')
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                h = _pystribog.StribogHash(_pystribog.Hash512)
                                h_update = h.update(str(''.join(ch)))
                                res = binascii.hexlify(h.digest()).decode('utf-8')
                                if hsh == res:
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_stribog.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                else:
                    a1 = a2 = a3 = a4 = a5 = a6 = a7 = a8 = a9 = a10 = a11 = a12 = a13 = a14 = ""
                    total1 = total2 = total3 = total4 = total5 = total6 = total7 = total8 = total9 = total10 = total11 = total12 = total13 = total14 = 0
                    if self.mainwindow.checkBox_top_8.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=8)
                        total8 = total_sum_length ** 8
                        a8 = " 8"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_9.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=9)
                        total9 = total_sum_length ** 9
                        a9 = " 9"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            prom += 1
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_6.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=6)
                        total6 = total_sum_length ** 6
                        a6 = " 6"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_7.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=7)
                        total7 = total_sum_length ** 7
                        a7 = " 7"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_10.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=10)
                        total10 = total_sum_length ** 10
                        a10 = " 10"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_11.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=11)
                        total11 = total_sum_length ** 11
                        a11 = " 11"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_5.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=5)
                        total5 = total_sum_length ** 5
                        a5 = " 5"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_12.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=12)
                        total12 = total_sum_length ** 12
                        a12 = " 12"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_13.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=13)
                        a13 = " 13"
                        flag = False
                        total13 = total_sum_length ** 13
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_14.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=14)
                        total14 = total_sum_length ** 14
                        a14 = " 14"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_4.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=4)
                        total4 = total_sum_length ** 4
                        a4 = " 4"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_3.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=3)
                        total3 = total_sum_length ** 3
                        a3 = " 3"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_2.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=2)
                        total2 = total_sum_length ** 2
                        a2 = " 2"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_1.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=1)
                        total1 = total_sum_length ** 1
                        a1 = " 1"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Диапазон длин ################################################################################
            
            elif ui.checkBox_alphabet_symbols.isChecked():
                ui.textEdit_Console.append("Идет процесс взлома пароля...")
                ui.textEdit_Console.append(str(datetime.datetime.now()))
                ABC = self.mainwindow.lineEdit_ABC.text()
                abc = self.mainwindow.lineEdit_abc.text()
                numbers = self.mainwindow.lineEdit_123.text()
                symbols = self.mainwindow.lineEdit_symbols.text()
                total_sum_length = len(self.mainwindow.lineEdit_ABC.text()) + len(self.mainwindow.lineEdit_abc.text()) + len (self.mainwindow.lineEdit_123.text()) + len(self.mainwindow.lineEdit_symbols.text())
                if self.mainwindow.comboBox_customize_the_length.currentIndex() == 1:
                    min_symbols = self.mainwindow.spinBox_ot.value()
                    max_symbols = self.mainwindow.spinBox_do.value()
                    flag = False
                    total = 0
                    kolvo = 0
                    for i in range (min_symbols,max_symbols+1,1):
                        total = sum(total_sum_length ** ii for ii in range(min_symbols,max_symbols+1,1))

################################################################################ Алфавит символов. Диапазон длин. Md5 ################################################################################
                        
                        if ui.radioButton_md5.isChecked():
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.md5(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ui.textEdit_Console.append(datetime.datetime.now())
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_md5.isChecked():
                        if flag == False:
                            ui.textEdit_Console.append(str(datetime.datetime.now()))
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Диапазон длин. SHA1 ################################################################################
                        
                        if ui.radioButton_sha1.isChecked():
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha1(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha1.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Диапазон длин. SHA256 ################################################################################
                        
                        if ui.radioButton_sha256.isChecked():
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha256(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha256.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Диапазон длин. SHA512 ################################################################################
                        
                        if ui.radioButton_sha512.isChecked():
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha512(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha512.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Диапазон длин. Stribog ################################################################################
                        
                        if ui.radioButton_stribog.isChecked():
                            for ch in product(ABC+abc+numbers+symbols, repeat=i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                h = _pystribog.StribogHash(_pystribog.Hash512)
                                h_update = h.update(str(''.join(ch)))
                                res = binascii.hexlify(h.digest()).decode('utf-8')
                                if hsh == res:
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_stribog.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Алфавит символов. Популярные длины ################################################################################
                else:
                    a1 = a2 = a3 = a4 = a5 = a6 = a7 = a8 = a9 = a10 = a11 = a12 = a13 = a14 = ""
                    total1 = total2 = total3 = total4 = total5 = total6 = total7 = total8 = total9 = total10 = total11 = total12 = total13 = total14 = 0
                    if self.mainwindow.checkBox_top_8.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=8)
                        total8 = total_sum_length ** 8
                        a8 = " 8"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_9.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=9)
                        total9 = total_sum_length ** 9
                        a9 = " 9"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_6.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=6)
                        total6 = total_sum_length ** 6
                        a6 = " 6"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_7.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=7)
                        total7 = total_sum_length ** 7
                        a7 = " 7"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_10.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=10)
                        total10 = total_sum_length ** 10
                        a10 = " 10"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_11.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=11)
                        total11 = total_sum_length ** 11
                        a11 = " 11"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_5.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=5)
                        total5 = total_sum_length ** 5
                        a5 = " 5"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_12.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=12)
                        total12 = total_sum_length ** 12
                        a12 = " 12"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_13.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=13)
                        a13 = " 13"
                        flag = False
                        total13 = total_sum_length ** 13
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_14.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=14)
                        total14 = total_sum_length ** 14
                        a14 = " 14"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_4.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=4)
                        total4 = total_sum_length ** 4
                        a4 = " 4"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_3.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=3)
                        total3 = total_sum_length ** 3
                        a3 = " 3"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_2.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=2)
                        total2 = total_sum_length ** 2
                        a2 = " 2"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_1.isChecked():
                        mapp = itertools.product(ABC+abc+numbers+symbols, repeat=1)
                        total1 = total_sum_length ** 1
                        a1 = " 1"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов ################################################################################
            
            elif ui.checkBox_position_symbols.isChecked():
                ui.textEdit_Console.append("Идет процесс взлома пароля...")
                ABC = self.mainwindow.lineEdit_ABC.text()
                abc = self.mainwindow.lineEdit_abc.text()
                numbers = self.mainwindow.lineEdit_123.text()
                symbols = self.mainwindow.lineEdit_symbols.text()
                total_sum_length = len(self.mainwindow.lineEdit_ABC.text()) + len(self.mainwindow.lineEdit_abc.text()) + len (self.mainwindow.lineEdit_123.text()) + len(self.mainwindow.lineEdit_symbols.text())
                if self.mainwindow.comboBox_customize_the_length.currentIndex() == 1:
                    min_symbols = self.mainwindow.spinBox_ot.value()
                    max_symbols = self.mainwindow.spinBox_do.value()
                    flag = False
                    total = 0
                    kolvo = 0
                    for i in range (min_symbols,max_symbols+1,1):
                        total = sum(total_sum_length ** ii for ii in range(min_symbols,max_symbols+1,1))

################################################################################ Позиция символов. Диапазон длин. Md5 ################################################################################
                        
                        if ui.radioButton_md5.isChecked():
                            for ch in itertools.combinations_with_replacement(ABC+abc+numbers+symbols, i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.md5(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_md5.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов. Диапазон длин. SHA1 ################################################################################
                        
                        if ui.radioButton_sha1.isChecked():
                            for ch in itertools.combinations_with_replacement(ABC+abc+numbers+symbols, i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha1(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha1.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов. Диапазон длин. SHA256 ################################################################################
                        
                        if ui.radioButton_sha256.isChecked():
                            for ch in itertools.combinations_with_replacement(ABC+abc+numbers+symbols, i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha256(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha256.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов. Диапазон длин. SHA512 ################################################################################
                        
                        if ui.radioButton_sha512.isChecked():
                            for ch in itertools.combinations_with_replacement(ABC+abc+numbers+symbols, i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                md_5 = hashlib.sha512(str_i.encode())
                                if hsh == md_5.hexdigest():
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_sha512.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов. Диапазон длин. Stribog ################################################################################
                        
                        if ui.radioButton_stribog.isChecked():
                            for ch in itertools.combinations_with_replacement(ABC+abc+numbers+symbols, i):
                                kolvo += 1
                                if kolvo % 1000000 == 0:
                                    ui.textEdit_Console.append('Итерация: {}'.format(kolvo) + ' из ' + str(total))
                                str_i = str("%s" % (''.join(ch)))
                                hsh = self.mainwindow.lineEdit_hash.text()
                                h = _pystribog.StribogHash(_pystribog.Hash512)
                                h_update = h.update(str(''.join(ch)))
                                res = binascii.hexlify(h.digest()).decode('utf-8')
                                if hsh == res:
                                    flag = True
                                    ui.textEdit_Console.append('Последняя итерация: {}'.format(kolvo))
                                    ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                    ctypes.windll.user32.MessageBoxW(0, "Пароль успешно взломан!", "Успех!", 0)
                                    break
                    if ui.radioButton_stribog.isChecked():
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

################################################################################ Позиция символов. Популярные длины ################################################################################
                else:
                    a1 = a2 = a3 = a4 = a5 = a6 = a7 = a8 = a9 = a10 = a11 = a12 = a13 = a14 = ""
                    total1 = total2 = total3 = total4 = total5 = total6 = total7 = total8 = total9 = total10 = total11 = total12 = total13 = total14 = 0
                    if self.mainwindow.checkBox_top_8.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 8)
                        total8 = total_sum_length ** 8
                        a8 = " 8"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_9.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 9)
                        total9 = total_sum_length ** 9
                        a9 = " 9"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            prom += 1
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_6.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 6)
                        total6 = total_sum_length ** 6
                        a6 = " 6"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_7.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 7)
                        total7 = total_sum_length ** 7
                        a7 = " 7"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_10.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 10)
                        total10 = total_sum_length ** 10
                        a10 = " 10"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_11.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 11)
                        total11 = total_sum_length ** 11
                        a11 = " 11"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_5.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 5)
                        total5 = total_sum_length ** 5
                        a5 = " 5"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_12.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 12)
                        total12 = total_sum_length ** 12
                        a12 = " 12"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_13.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 13)
                        a13 = " 13"
                        flag = False
                        total13 = total_sum_length ** 13
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_14.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 14)
                        total14 = total_sum_length ** 14
                        a14 = " 14"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_4.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 4)
                        total4 = total_sum_length ** 4
                        a4 = " 4"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_3.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 3)
                        total3 = total_sum_length ** 3
                        a3 = " 3"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                flag = True
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_2.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 2)
                        total2 = total_sum_length ** 2
                        a2 = " 2"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')
                    if self.mainwindow.checkBox_top_1.isChecked():
                        mapp = itertools.combinations_with_replacement(ABC+abc+numbers+symbols, 1)
                        total1 = total_sum_length ** 1
                        a1 = " 1"
                        flag = False
                        for ch in mapp:
                            str_i = str("%s" % (''.join(ch)))
                            imd_5 = hashlib.md5(str_i.encode())
                            md_5 = self.mainwindow.lineEdit_hash.text()
                            if md_5 == imd_5.hexdigest():
                                ui.textEdit_Console.append('Искомый пароль: ' + str(''.join(ch)))
                                ctypes.windll.user32.MessageBoxW(0, "Перебор завершен с успехом! " + str("%s" % (''.join(ch))), "Успех!", 0)
                                break
                        if flag == False:
                            ctypes.windll.user32.MessageBoxW(0, "Перебор завершен! Пароль не подобран!", "Неудача!", 0)
                            ui.textEdit_Console.append('Перебор завершен, пароль не подобран!')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1128, 836)
        MainWindow.setMinimumSize(QtCore.QSize(1128, 836))
        MainWindow.setMaximumSize(QtCore.QSize(1128, 836))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_generation = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_generation.setGeometry(QtCore.QRect(20, 10, 1091, 361))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_generation.setFont(font)
        self.groupBox_generation.setObjectName("groupBox_generation")
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_generation)
        self.groupBox.setGeometry(QtCore.QRect(10, 30, 341, 321))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.spinBox_ABC = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox_ABC.setEnabled(False)
        self.spinBox_ABC.setGeometry(QtCore.QRect(10, 112, 41, 16))
        self.spinBox_ABC.setSpecialValueText("")
        self.spinBox_ABC.setMaximum(26)
        self.spinBox_ABC.setObjectName("spinBox_ABC")
        self.spinBox_abc = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox_abc.setEnabled(False)
        self.spinBox_abc.setGeometry(QtCore.QRect(10, 172, 42, 16))
        self.spinBox_abc.setSpecialValueText("")
        self.spinBox_abc.setMaximum(26)
        self.spinBox_abc.setObjectName("spinBox_abc")
        self.spinBox_123 = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox_123.setEnabled(False)
        self.spinBox_123.setGeometry(QtCore.QRect(10, 232, 41, 16))
        self.spinBox_123.setBaseSize(QtCore.QSize(0, 0))
        self.spinBox_123.setSpecialValueText("")
        self.spinBox_123.setMaximum(10)
        self.spinBox_123.setObjectName("spinBox_123")
        self.spinBox_symbols = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox_symbols.setEnabled(False)
        self.spinBox_symbols.setGeometry(QtCore.QRect(10, 290, 42, 16))
        self.spinBox_symbols.setMaximum(33)
        self.spinBox_symbols.setObjectName("spinBox_symbols")
        self.lineEdit_ABC = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_ABC.setEnabled(False)
        self.lineEdit_ABC.setGeometry(QtCore.QRect(70, 112, 261, 21))
        self.lineEdit_ABC.setObjectName("lineEdit_ABC")
        self.lineEdit_abc = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_abc.setEnabled(False)
        self.lineEdit_abc.setGeometry(QtCore.QRect(70, 170, 261, 21))
        self.lineEdit_abc.setObjectName("lineEdit_abc")
        self.lineEdit_123 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_123.setEnabled(False)
        self.lineEdit_123.setGeometry(QtCore.QRect(70, 230, 261, 21))
        self.lineEdit_123.setObjectName("lineEdit_123")
        self.lineEdit_symbols = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_symbols.setEnabled(False)
        self.lineEdit_symbols.setGeometry(QtCore.QRect(70, 288, 261, 21))
        self.lineEdit_symbols.setObjectName("lineEdit_symbols")
        self.comboBox_ABC = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_ABC.setEnabled(False)
        self.comboBox_ABC.setGeometry(QtCore.QRect(10, 80, 321, 21))
        self.comboBox_ABC.setObjectName("comboBox_ABC")
        self.comboBox_ABC.addItem("")
        self.comboBox_ABC.addItem("")
        self.comboBox_ABC.addItem("")
        self.comboBox_ABC.addItem("")
        self.comboBox_abc = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_abc.setEnabled(False)
        self.comboBox_abc.setGeometry(QtCore.QRect(10, 138, 321, 21))
        self.comboBox_abc.setObjectName("comboBox_abc")
        self.comboBox_abc.addItem("")
        self.comboBox_abc.addItem("")
        self.comboBox_abc.addItem("")
        self.comboBox_abc.addItem("")
        self.comboBox_123 = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_123.setEnabled(False)
        self.comboBox_123.setGeometry(QtCore.QRect(10, 200, 321, 21))
        self.comboBox_123.setObjectName("comboBox_123")
        self.comboBox_123.addItem("")
        self.comboBox_123.addItem("")
        self.comboBox_123.addItem("")
        self.comboBox_123.addItem("")
        self.comboBox_symbols = QtWidgets.QComboBox(self.groupBox)
        self.comboBox_symbols.setEnabled(False)
        self.comboBox_symbols.setGeometry(QtCore.QRect(10, 260, 321, 21))
        self.comboBox_symbols.setObjectName("comboBox_symbols")
        self.comboBox_symbols.addItem("")
        self.comboBox_symbols.addItem("")
        self.comboBox_symbols.addItem("")
        self.comboBox_symbols.addItem("")
        self.alphabet = QtWidgets.QLabel(self.groupBox)
        self.alphabet.setGeometry(QtCore.QRect(10, 25, 68, 19))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.alphabet.setFont(font)
        self.alphabet.setObjectName("alphabet")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 50, 321, 21))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.checkBox_ABC = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.checkBox_ABC.setFont(font)
        self.checkBox_ABC.setObjectName("checkBox_ABC")
        self.horizontalLayout.addWidget(self.checkBox_ABC)
        self.checkBox_abc = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.checkBox_abc.setFont(font)
        self.checkBox_abc.setObjectName("checkBox_abc")
        self.horizontalLayout.addWidget(self.checkBox_abc)
        self.checkBox_123 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.checkBox_123.setFont(font)
        self.checkBox_123.setObjectName("checkBox_123")
        self.horizontalLayout.addWidget(self.checkBox_123)
        self.checkBox_symbols = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.checkBox_symbols.setFont(font)
        self.checkBox_symbols.setObjectName("checkBox_symbols")
        self.horizontalLayout.addWidget(self.checkBox_symbols)
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_generation)
        self.groupBox_2.setEnabled(True)
        self.groupBox_2.setGeometry(QtCore.QRect(370, 30, 341, 321))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.label_number_of_characters = QtWidgets.QLabel(self.groupBox_2)
        self.label_number_of_characters.setGeometry(QtCore.QRect(10, 70, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setUnderline(True)
        self.label_number_of_characters.setFont(font)
        self.label_number_of_characters.setObjectName("label_number_of_characters")
        self.spinBox_ot = QtWidgets.QSpinBox(self.groupBox_2)
        self.spinBox_ot.setEnabled(False)
        self.spinBox_ot.setGeometry(QtCore.QRect(30, 102, 42, 16))
        self.spinBox_ot.setMinimum(1)
        self.spinBox_ot.setMaximum(15)
        self.spinBox_ot.setProperty("value", 1)
        self.spinBox_ot.setObjectName("spinBox_ot")
        self.spinBox_do = QtWidgets.QSpinBox(self.groupBox_2)
        self.spinBox_do.setEnabled(False)
        self.spinBox_do.setGeometry(QtCore.QRect(100, 102, 42, 16))
        self.spinBox_do.setMaximum(15)
        self.spinBox_do.setProperty("value", 5)
        self.spinBox_do.setObjectName("spinBox_do")
        self.label_ot = QtWidgets.QLabel(self.groupBox_2)
        self.label_ot.setGeometry(QtCore.QRect(10, 100, 31, 16))
        self.label_ot.setObjectName("label_ot")
        self.label_do = QtWidgets.QLabel(self.groupBox_2)
        self.label_do.setGeometry(QtCore.QRect(80, 100, 21, 16))
        self.label_do.setObjectName("label_do")
        self.comboBox_customize_the_length = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_customize_the_length.setGeometry(QtCore.QRect(10, 30, 311, 21))
        self.comboBox_customize_the_length.setObjectName("comboBox_customize_the_length")
        self.comboBox_customize_the_length.addItem("")
        self.comboBox_customize_the_length.addItem("")
        self.comboBox_customize_the_length.addItem("")
        self.label_top_legth = QtWidgets.QLabel(self.groupBox_2)
        self.label_top_legth.setGeometry(QtCore.QRect(10, 150, 111, 19))
        font = QtGui.QFont()
        font.setUnderline(True)
        self.label_top_legth.setFont(font)
        self.label_top_legth.setObjectName("label_top_legth")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox_2)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 190, 331, 42))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.checkBox_top_6 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_6.setEnabled(False)
        self.checkBox_top_6.setObjectName("checkBox_top_6")
        self.gridLayout_2.addWidget(self.checkBox_top_6, 0, 2, 1, 1)
        self.checkBox_top_10 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_10.setEnabled(False)
        self.checkBox_top_10.setObjectName("checkBox_top_10")
        self.gridLayout_2.addWidget(self.checkBox_top_10, 0, 4, 1, 1)
        self.checkBox_top_11 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_11.setEnabled(False)
        self.checkBox_top_11.setObjectName("checkBox_top_11")
        self.gridLayout_2.addWidget(self.checkBox_top_11, 0, 5, 1, 1)
        self.checkBox_top_9 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_9.setEnabled(False)
        self.checkBox_top_9.setObjectName("checkBox_top_9")
        self.gridLayout_2.addWidget(self.checkBox_top_9, 0, 1, 1, 1)
        self.checkBox_top_8 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_8.setEnabled(False)
        self.checkBox_top_8.setObjectName("checkBox_top_8")
        self.gridLayout_2.addWidget(self.checkBox_top_8, 0, 0, 1, 1)
        self.checkBox_top_5 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_5.setEnabled(False)
        self.checkBox_top_5.setObjectName("checkBox_top_5")
        self.gridLayout_2.addWidget(self.checkBox_top_5, 0, 6, 1, 1)
        self.checkBox_top_7 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_7.setEnabled(False)
        self.checkBox_top_7.setObjectName("checkBox_top_7")
        self.gridLayout_2.addWidget(self.checkBox_top_7, 0, 3, 1, 1)
        self.checkBox_top_12 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_12.setEnabled(False)
        self.checkBox_top_12.setObjectName("checkBox_top_12")
        self.gridLayout_2.addWidget(self.checkBox_top_12, 1, 0, 1, 1)
        self.checkBox_top_13 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_13.setEnabled(False)
        self.checkBox_top_13.setObjectName("checkBox_top_13")
        self.gridLayout_2.addWidget(self.checkBox_top_13, 1, 1, 1, 1)
        self.checkBox_top_14 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_14.setEnabled(False)
        self.checkBox_top_14.setObjectName("checkBox_top_14")
        self.gridLayout_2.addWidget(self.checkBox_top_14, 1, 2, 1, 1)
        self.checkBox_top_4 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_4.setEnabled(False)
        self.checkBox_top_4.setObjectName("checkBox_top_4")
        self.gridLayout_2.addWidget(self.checkBox_top_4, 1, 3, 1, 1)
        self.checkBox_top_3 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_3.setEnabled(False)
        self.checkBox_top_3.setObjectName("checkBox_top_3")
        self.gridLayout_2.addWidget(self.checkBox_top_3, 1, 4, 1, 1)
        self.checkBox_top_2 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_2.setEnabled(False)
        self.checkBox_top_2.setObjectName("checkBox_top_2")
        self.gridLayout_2.addWidget(self.checkBox_top_2, 1, 5, 1, 1)
        self.checkBox_top_1 = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.checkBox_top_1.setEnabled(False)
        self.checkBox_top_1.setObjectName("checkBox_top_1")
        self.gridLayout_2.addWidget(self.checkBox_top_1, 1, 6, 1, 1)
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_generation)
        self.groupBox_3.setGeometry(QtCore.QRect(730, 30, 351, 321))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.comboBox_mode = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_mode.setGeometry(QtCore.QRect(10, 60, 321, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_mode.setFont(font)
        self.comboBox_mode.setObjectName("comboBox_mode")
        self.comboBox_mode.addItem("")
        self.comboBox_mode.addItem("")
        self.comboBox_mode.addItem("")
        self.label_mode = QtWidgets.QLabel(self.groupBox_3)
        self.label_mode.setGeometry(QtCore.QRect(10, 30, 91, 19))
        font = QtGui.QFont()
        font.setUnderline(True)
        self.label_mode.setFont(font)
        self.label_mode.setObjectName("label_mode")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_3)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 110, 160, 94))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.spinBox_bigramm = QtWidgets.QSpinBox(self.gridLayoutWidget_2)
        self.spinBox_bigramm.setEnabled(False)
        self.spinBox_bigramm.setObjectName("spinBox_bigramm")
        self.gridLayout.addWidget(self.spinBox_bigramm, 2, 1, 1, 1)
        self.checkBox_alphabet_symbols = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.checkBox_alphabet_symbols.setEnabled(False)
        self.checkBox_alphabet_symbols.setObjectName("checkBox_alphabet_symbols")
        self.gridLayout.addWidget(self.checkBox_alphabet_symbols, 0, 0, 1, 1)
        self.checkBox_position_symbols = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.checkBox_position_symbols.setEnabled(False)
        self.checkBox_position_symbols.setObjectName("checkBox_position_symbols")
        self.gridLayout.addWidget(self.checkBox_position_symbols, 1, 0, 1, 1)
        self.checkBox_bigramm = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.checkBox_bigramm.setEnabled(False)
        self.checkBox_bigramm.setObjectName("checkBox_bigramm")
        self.gridLayout.addWidget(self.checkBox_bigramm, 2, 0, 1, 1)
        self.checkBox_mask = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_mask.setEnabled(False)
        self.checkBox_mask.setGeometry(QtCore.QRect(10, 210, 81, 17))
        self.checkBox_mask_alp = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_mask_alp.setEnabled(False)
        self.checkBox_mask_alp.setGeometry(QtCore.QRect(10, 243, 250, 17))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.checkBox_mask.setFont(font)
        self.checkBox_mask.setObjectName("checkBox_mask")
        self.checkBox_mask_alp.setFont(font)
        self.checkBox_mask_alp.setObjectName("checkBox_mask_alp")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(70, 210, 271, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_alp = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_alp.setEnabled(False)
        self.lineEdit_alp.setGeometry(QtCore.QRect(230, 243, 110, 20))
        self.lineEdit_alp.setObjectName("lineEdit_alp")
        self.generate_a_dictionary = QtWidgets.QPushButton(self.groupBox_3)
        self.generate_a_dictionary.setGeometry(QtCore.QRect(180, 280, 161, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.generate_a_dictionary.setFont(font)
        self.generate_a_dictionary.setObjectName("generate_a_dictionary")
        self.reset_setting = QtWidgets.QPushButton(self.groupBox_3)
        self.reset_setting.setGeometry(QtCore.QRect(10, 280, 161, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.reset_setting.setFont(font)
        self.reset_setting.setObjectName("reset_setting")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(20, 380, 1091, 161))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setObjectName("groupBox_4")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_4)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 30, 521, 121))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.lineEdit_hash = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit_hash.setGeometry(QtCore.QRect(10, 50, 501, 21))
        self.lineEdit_hash.setObjectName("lineEdit_hash")
        self.label_HASH = QtWidgets.QLabel(self.groupBox_5)
        self.label_HASH.setGeometry(QtCore.QRect(10, 22, 101, 19))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_HASH.setFont(font)
        self.label_HASH.setObjectName("label_HASH")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox_5)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 80, 501, 24))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.radioButton_md5 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_md5.setObjectName("radioButton_md5")
        self.horizontalLayout_3.addWidget(self.radioButton_md5)
        self.radioButton_sha1 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_sha1.setObjectName("radioButton_sha1")
        self.horizontalLayout_3.addWidget(self.radioButton_sha1)
        self.radioButton_sha256 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_sha256.setObjectName("radioButton_sha256")
        self.horizontalLayout_3.addWidget(self.radioButton_sha256)
        self.radioButton_sha512 = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_sha512.setObjectName("radioButton_sha512")
        self.horizontalLayout_3.addWidget(self.radioButton_sha512)
        self.radioButton_stribog = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        self.radioButton_stribog.setObjectName("radioButton_stribog")
        self.horizontalLayout_3.addWidget(self.radioButton_stribog)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_4)
        self.groupBox_6.setGeometry(QtCore.QRect(550, 30, 521, 121))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_dictionary = QtWidgets.QLabel(self.groupBox_6)
        self.label_dictionary.setGeometry(QtCore.QRect(10, 53, 111, 19))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_dictionary.setFont(font)
        self.label_dictionary.setObjectName("label_dictionary")
        self.pushButton_START = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_START.setGeometry(QtCore.QRect(10, 80, 201, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_START.setFont(font)
        self.pushButton_START.setObjectName("pushButton_START")
        self.comboBox_process = QtWidgets.QComboBox(self.groupBox_6)
        self.comboBox_process.setGeometry(QtCore.QRect(10, 25, 501, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_process.setFont(font)
        self.comboBox_process.setObjectName("comboBox_process")
        self.comboBox_process.addItem("")
        self.comboBox_process.addItem("")
        self.pushButton_STOP = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_STOP.setGeometry(QtCore.QRect(310, 80, 201, 23))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_STOP.setFont(font)
        self.pushButton_STOP.setObjectName("pushButton_STOP")

        #qRegisterMetaType("QTextBlock")
        #RegisterMetaType("QTextCursor")

        self.textEdit_Console = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_Console.setGeometry(QtCore.QRect(20, 551, 1091, 241))
        self.textEdit_Console.setObjectName("textEdit_Console")
        self.textEdit_Console.setReadOnly(True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1128, 21))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())

        self.generate_a_dictionary.clicked.connect(self.potok)
        self.pushButton_START.clicked.connect(self.potok_2)
        self.new = generating_dictionary(mainwindow=self)
        self.new_generator = generator(mainwindow=self)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Анализатор эффективности стратегий поиска паролей на основе статистического анализа Collection #1"))
        self.groupBox_generation.setTitle(_translate("MainWindow", "Используемая стратегия"))
        self.groupBox.setTitle(_translate("MainWindow", "Шаг 1. Параметры алфавита"))
        self.comboBox_ABC.setItemText(0, _translate("MainWindow", "<Выберите режим настройки алфавита ABC>"))
        self.comboBox_ABC.setItemText(1, _translate("MainWindow", "Выбрать количество символов ABC из ряда популярных"))
        self.comboBox_ABC.setItemText(2, _translate("MainWindow", "Выбрать символы ABC, присутствующие в алфавите"))
        self.comboBox_ABC.setItemText(3, _translate("MainWindow", "Использовать весь словарь ABC"))
        self.comboBox_abc.setItemText(0, _translate("MainWindow", "<Выберите режим настройки алфавита abc>"))
        self.comboBox_abc.setItemText(1, _translate("MainWindow", "Выбрать количество символов abc из ряда популярных"))
        self.comboBox_abc.setItemText(2, _translate("MainWindow", "Выбрать символы abc, присутствующие в алфавите"))
        self.comboBox_abc.setItemText(3, _translate("MainWindow", "Использовать весь словарь abc"))
        self.comboBox_123.setItemText(0, _translate("MainWindow", "<Выберите режим настройки алфавита 123>"))
        self.comboBox_123.setItemText(1, _translate("MainWindow", "Выбрать количество символов 123 из ряда популярных"))
        self.comboBox_123.setItemText(2, _translate("MainWindow", "Выбрать символы 123, присутствующие в алфавите"))
        self.comboBox_123.setItemText(3, _translate("MainWindow", "Использовать весь словарь 123"))
        self.comboBox_symbols.setItemText(0, _translate("MainWindow", "<Выберите режим настройки алфавита #$!>"))
        self.comboBox_symbols.setItemText(1, _translate("MainWindow", "Выбрать количество символов #$! из ряда популярных"))
        self.comboBox_symbols.setItemText(2, _translate("MainWindow", "Выбрать символы #$!, присутствующие в алфавите"))
        self.comboBox_symbols.setItemText(3, _translate("MainWindow", "Использовать весь словарь #$!"))
        self.alphabet.setText(_translate("MainWindow", "Алфавиты:"))
        self.checkBox_ABC.setText(_translate("MainWindow", "ABC"))
        self.checkBox_abc.setText(_translate("MainWindow", "abc"))
        self.checkBox_123.setText(_translate("MainWindow", "123"))
        self.checkBox_symbols.setText(_translate("MainWindow", "#$!"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Шаг 2. Настройки длины вариантов слов"))
        self.label_number_of_characters.setText(_translate("MainWindow", "Количество символов:"))
        self.label_ot.setText(_translate("MainWindow", "от"))
        self.label_do.setText(_translate("MainWindow", "до"))
        self.comboBox_customize_the_length.setItemText(0, _translate("MainWindow", "<Выберите режим настройки длины вариантов слов>"))
        self.comboBox_customize_the_length.setItemText(1, _translate("MainWindow", "Выбрать количество символов"))
        self.comboBox_customize_the_length.setItemText(2, _translate("MainWindow", "Выбрать популярные длины, участвующие в переборе"))
        self.label_top_legth.setText(_translate("MainWindow", "Популярные длины:"))
        self.checkBox_top_6.setText(_translate("MainWindow", "6"))
        self.checkBox_top_10.setText(_translate("MainWindow", "10"))
        self.checkBox_top_11.setText(_translate("MainWindow", "11"))
        self.checkBox_top_9.setText(_translate("MainWindow", "9"))
        self.checkBox_top_8.setText(_translate("MainWindow", "8"))
        self.checkBox_top_5.setText(_translate("MainWindow", "5"))
        self.checkBox_top_7.setText(_translate("MainWindow", "7"))
        self.checkBox_top_12.setText(_translate("MainWindow", "12"))
        self.checkBox_top_13.setText(_translate("MainWindow", "13"))
        self.checkBox_top_14.setText(_translate("MainWindow", "14"))
        self.checkBox_top_4.setText(_translate("MainWindow", "4"))
        self.checkBox_top_3.setText(_translate("MainWindow", "3"))
        self.checkBox_top_2.setText(_translate("MainWindow", "2"))
        self.checkBox_top_1.setText(_translate("MainWindow", "1"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Шаг 3. Настройки режима работы генератора"))
        self.comboBox_mode.setItemText(0, _translate("MainWindow", "<Выберите режим работы>"))
        self.comboBox_mode.setItemText(1, _translate("MainWindow", "Классический брутфорс"))
        self.comboBox_mode.setItemText(2, _translate("MainWindow", "Брутфорс с использованием стат. методов"))
        self.label_mode.setText(_translate("MainWindow", "Режим работы:"))
        self.checkBox_alphabet_symbols.setText(_translate("MainWindow", "Алфавит символов"))
        self.checkBox_position_symbols.setText(_translate("MainWindow", "Позиция символов"))
        self.checkBox_bigramm.setText(_translate("MainWindow", "Биграммы"))
        self.checkBox_mask.setText(_translate("MainWindow", "Маска"))
        self.checkBox_mask_alp.setText(_translate("MainWindow", "Приоритет использования алфавитов"))
        self.generate_a_dictionary.setText(_translate("MainWindow", "Сгенерировать словарь"))
        self.reset_setting.setText(_translate("MainWindow", "Сброс настроек стратегии"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Модуль имитации системы парольной аутентификации"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Настройки параметров использования хеш-функции"))
        self.label_HASH.setText(_translate("MainWindow", "Целевое значение:"))
        self.radioButton_md5.setText(_translate("MainWindow", "MD5"))
        self.radioButton_sha1.setText(_translate("MainWindow", "SHA1"))
        self.radioButton_sha256.setText(_translate("MainWindow", "SHA256"))
        self.radioButton_sha512.setText(_translate("MainWindow", "SHA512"))
        self.radioButton_stribog.setText(_translate("MainWindow", "Stribog"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Подготовка к процессу подбора"))
        self.label_dictionary.setText(_translate("MainWindow", "Словарь:"))
        self.pushButton_START.setText(_translate("MainWindow", "Начать процесс подбора"))
        self.comboBox_process.setItemText(0, _translate("MainWindow", "Использовать настройки стратегий"))
        self.comboBox_process.setItemText(1, _translate("MainWindow", "Выбрать словарь"))
        self.pushButton_STOP.setText(_translate("MainWindow", "Остановить процесс подбора"))
        self.menu.setTitle(_translate("MainWindow", "Опции"))
        self.menu_2.setTitle(_translate("MainWindow", "Помощь"))
        self.menu_3.setTitle(_translate("MainWindow", "О программе"))
        self.menu_4.setTitle(_translate("MainWindow", "Выход"))
        self.action.setText(_translate("MainWindow", "Очистить консоль"))
        self.action_2.setText(_translate("MainWindow", "Модуль генерации словаря"))
        self.action_3.setText(_translate("MainWindow", "Модуль реализации алгоритмова перебора паролей"))
        self.generate_a_dictionary.clicked.connect(self.potok)
        self.pushButton_START.clicked.connect(self.potok_2)

    
    def onCountChanged_2(self, text):
        self.textEdit_Console.append(str(text))
    
    def onCountChanged(self, text):
        self.textEdit_Console.append(str(text))

    def potok(self):
        self.new.countChanged.connect(self.onCountChanged)
        self.new.start()

    def potok_2(self):
        self.new_generator.countChanged_2.connect(self.onCountChanged_2)
        self.new_generator.start()

app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
ui.menu_4.aboutToShow.connect(app.quit)


############################################ ОЧИСТИТЬ КОНСОЛЬ ############################################

def clearConsole():
	ui.textEdit_Console.setText("")
ui.action.triggered.connect(clearConsole)

########################################### НАСТРОЙКА АЛФАВИТА ###########################################

def unique(obj: iter):
    args = []
    for a in obj:
        if a not in args:
            args.append(a)
            yield a

def spinABCValue(i):
    ABC = ['E','D','A','F','S','M','R','L','K','N','V','I','O','B','T','P','G','C','H','Z','U','Y','J','W','Q','X']
    for ii in ABC:
        ui.lineEdit_ABC.setText(''.join(ABC[0:i]))

def spinabcValue(i):
    abc = ['a','e','s','r','i','q','l','o','n','w','m','d','k','t','v','p','f','b','u','c','h','g','z','y','j','x']
    for ii in abc:
        ui.lineEdit_abc.setText(''.join(abc[0:i]))

def spin123Value(i):
    numbers = ['1','2','3','0','9','5','7','8','4','6']
    for ii in numbers:
        ui.lineEdit_123.setText(''.join(numbers[0:i]))

def spinsymbolsValue(i):
    symbols = ['.','-','!',':','$','?',',','*','@','[','+','(','/',']','#','&','%',')','^','}',chr(39),'{',';','"','`', '_','=','№','|','<','>','~',chr(92)]
    for ii in symbols:
        ui.lineEdit_symbols.setText(''.join(symbols[0:i]))

def numberSpinABC():
    ui.spinBox_ABC.setProperty("value", len(ui.lineEdit_ABC.text()))
    ui.lineEdit_ABC.setText(''.join(unique(ui.lineEdit_ABC.text())))

def numberSpinabc():
    ui.spinBox_abc.setProperty("value", len(ui.lineEdit_abc.text()))
    ui.lineEdit_abc.setText(''.join(unique(ui.lineEdit_abc.text())))

def numberSpin123():
    ui.spinBox_123.setProperty("value", len(ui.lineEdit_123.text()))
    ui.lineEdit_123.setText(''.join(unique(ui.lineEdit_123.text())))

def numberSpinsymbols():
    ui.spinBox_symbols.setProperty("value", len(ui.lineEdit_symbols.text()))
    ui.lineEdit_symbols.setText(''.join(unique(ui.lineEdit_symbols.text())))

def checkBoxModeABC(index):
    ui.lineEdit_ABC.setValidator(QRegExpValidator(QRegExp("[A-Z]{26}")))
    if index == 0:
        ui.lineEdit_ABC.setEnabled(False)
        ui.spinBox_ABC.setEnabled(False)
        ui.spinBox_ABC.setProperty("value", 0)
        ui.lineEdit_ABC.setText("")
    elif index == 1:
        ui.spinBox_ABC.setEnabled(True)
        ui.lineEdit_ABC.setEnabled(False)
        ui.spinBox_ABC.setProperty("value", 0)
        ui.lineEdit_ABC.setText("")
        ui.spinBox_ABC.valueChanged.connect(spinABCValue)
    elif index == 2:
        ui.lineEdit_ABC.setEnabled(True)
        ui.spinBox_ABC.setEnabled(False)
        ui.spinBox_ABC.setProperty("value", 0)
        ui.lineEdit_ABC.setText("")
        if ui.spinBox_ABC.valueChanged.connect(spinABCValue):
            ui.spinBox_ABC.disconnect()
        ui.lineEdit_ABC.textChanged.connect(numberSpinABC)
    elif index == 3:
        ui.lineEdit_ABC.setEnabled(False)
        ui.spinBox_ABC.setEnabled(False)
        ui.spinBox_ABC.setProperty("value", 26)
        ui.lineEdit_ABC.setText("ABCDEFGHIJKLMNOPQRSTUVWXYZ")

def checkBoxModeabc(index):
    ui.lineEdit_abc.setValidator(QRegExpValidator(QRegExp("[a-z]{26}")))
    if index == 0:
        ui.lineEdit_abc.setEnabled(False)
        ui.spinBox_abc.setEnabled(False)
        ui.spinBox_abc.setProperty("value", 0)
        ui.lineEdit_abc.setText("")
    elif index == 1:
        ui.spinBox_abc.setEnabled(True)
        ui.lineEdit_abc.setEnabled(False)
        ui.spinBox_abc.setProperty("value", 0)
        ui.lineEdit_abc.setText("")
        ui.spinBox_abc.valueChanged.connect(spinabcValue)
    elif index == 2:
        ui.lineEdit_abc.setEnabled(True)
        ui.spinBox_abc.setEnabled(False)
        ui.spinBox_abc.setProperty("value", 0)
        ui.lineEdit_abc.setText("")
        if ui.spinBox_abc.valueChanged.connect(spinabcValue):
            ui.spinBox_abc.disconnect()
        ui.lineEdit_abc.textChanged.connect(numberSpinabc)
    elif index == 3:
        ui.lineEdit_abc.setEnabled(False)
        ui.spinBox_abc.setEnabled(False)
        ui.spinBox_abc.setProperty("value", 26)
        ui.lineEdit_abc.setText("abcdefghijklmnopqrstuvwxyz")

def checkBoxMode123(index):
    ui.lineEdit_123.setValidator(QRegExpValidator(QRegExp("[1234567890]{10}")))
    if index == 0:
        ui.lineEdit_123.setEnabled(False)
        ui.spinBox_123.setEnabled(False)
        ui.spinBox_123.setProperty("value", 0)
        ui.lineEdit_123.setText("")
    elif index == 1:
        ui.spinBox_123.setEnabled(True)
        ui.lineEdit_123.setEnabled(False)
        ui.spinBox_123.setProperty("value", 0)
        ui.lineEdit_123.setText("")
        ui.spinBox_123.valueChanged.connect(spin123Value)
    elif index == 2:
        ui.lineEdit_123.setEnabled(True)
        ui.spinBox_123.setEnabled(False)
        ui.spinBox_123.setProperty("value", 0)
        ui.lineEdit_123.setText("")
        if ui.spinBox_123.valueChanged.connect(spin123Value):
            ui.spinBox_123.disconnect()
        ui.lineEdit_123.textChanged.connect(numberSpin123)
    elif index == 3:
        ui.lineEdit_123.setEnabled(False)
        ui.spinBox_123.setEnabled(False)
        ui.spinBox_123.setProperty("value", 10)
        ui.lineEdit_123.setText("0123456789")

def checkBoxModesymbols(index):
    ui.lineEdit_symbols.setValidator(QRegExpValidator(QRegExp(chr(91)+chr(93)+chr(34)+chr(92)+"[`;:?_={,.№}|/<'>$~!@#%^&*()+-]{33}")))
    if index == 0:
        ui.lineEdit_symbols.setEnabled(False)
        ui.spinBox_symbols.setEnabled(False)
        ui.spinBox_symbols.setProperty("value", 0)
        ui.lineEdit_symbols.setText("")
    elif index == 1:
        ui.spinBox_symbols.setEnabled(True)
        ui.lineEdit_symbols.setEnabled(False)
        ui.spinBox_symbols.setProperty("value", 0)
        ui.lineEdit_symbols.setText("")
        ui.spinBox_symbols.valueChanged.connect(spinsymbolsValue)
    elif index == 2:
        ui.lineEdit_symbols.setEnabled(True)
        ui.spinBox_symbols.setEnabled(False)
        ui.spinBox_symbols.setProperty("value", 0)
        ui.lineEdit_symbols.setText("")
        if ui.spinBox_symbols.valueChanged.connect(spinsymbolsValue):
            ui.spinBox_symbols.disconnect()
        ui.lineEdit_symbols.textChanged.connect(numberSpinsymbols)
    elif index == 3:
        ui.lineEdit_symbols.setEnabled(False)
        ui.spinBox_symbols.setEnabled(False)
        ui.spinBox_symbols.setProperty("value", 33)
        ui.lineEdit_symbols.setText(chr(91)+chr(93)+chr(34)+chr(92)+"`;:?_={,.№}|/<'>$~!@#%^&*()+-")

def checkBoxCheck():
    if ui.checkBox_ABC.isChecked():
        ui.comboBox_ABC.setEnabled(True)
        ui.comboBox_ABC.activated[int].connect(checkBoxModeABC)
    else:
        ui.spinBox_ABC.setProperty("value", 0)
        ui.lineEdit_ABC.setText("")
        ui.spinBox_ABC.setEnabled(False)
        ui.comboBox_ABC.setEnabled(False)
        ui.lineEdit_ABC.setEnabled(False)
        ui.comboBox_ABC.setCurrentIndex(0)
    if ui.checkBox_abc.isChecked():
        ui.comboBox_abc.setEnabled(True)
        ui.comboBox_abc.activated[int].connect(checkBoxModeabc)
    else:
        ui.spinBox_abc.setProperty("value", 0)
        ui.lineEdit_abc.setText("")
        ui.spinBox_abc.setEnabled(False)
        ui.comboBox_abc.setEnabled(False)
        ui.lineEdit_abc.setEnabled(False)
        ui.comboBox_abc.setCurrentIndex(0)
    if ui.checkBox_123.isChecked():
        ui.comboBox_123.setEnabled(True)
        ui.comboBox_123.activated[int].connect(checkBoxMode123)
    else:
        ui.spinBox_123.setProperty("value", 0)
        ui.lineEdit_123.setText("")
        ui.spinBox_123.setEnabled(False)
        ui.comboBox_123.setEnabled(False)
        ui.lineEdit_123.setEnabled(False)
        ui.comboBox_123.setCurrentIndex(0)
    if ui.checkBox_symbols.isChecked():
        ui.comboBox_symbols.setEnabled(True)
        ui.comboBox_symbols.activated[int].connect(checkBoxModesymbols)
    else:
        ui.spinBox_symbols.setProperty("value", 0)
        ui.lineEdit_symbols.setText("")
        ui.spinBox_symbols.setEnabled(False)
        ui.comboBox_symbols.setEnabled(False)
        ui.lineEdit_symbols.setEnabled(False)
        ui.comboBox_symbols.setCurrentIndex(0)

ui.checkBox_ABC.clicked.connect(checkBoxCheck)
ui.checkBox_abc.clicked.connect(checkBoxCheck)
ui.checkBox_123.clicked.connect(checkBoxCheck)
ui.checkBox_symbols.clicked.connect(checkBoxCheck)

########################################### НАСТРОЙКА ДЛИНЫ ВАРИАНТОВ ИСПОЛЬЗОВАНИЯ ###########################################

def customize(index):
    if index == 0:
        ui.spinBox_ot.setEnabled(False)
        ui.spinBox_do.setEnabled(False)
        ui.spinBox_ot.setMinimum(0)
        ui.spinBox_do.setMinimum(0)
        ui.spinBox_ot.setProperty("value", 0)
        ui.spinBox_do.setProperty("value", 0)
        ui.checkBox_top_8.setEnabled(False)
        ui.checkBox_top_9.setEnabled(False)
        ui.checkBox_top_6.setEnabled(False)
        ui.checkBox_top_7.setEnabled(False)
        ui.checkBox_top_10.setEnabled(False)
        ui.checkBox_top_11.setEnabled(False)
        ui.checkBox_top_5.setEnabled(False)
        ui.checkBox_top_12.setEnabled(False)
        ui.checkBox_top_13.setEnabled(False)
        ui.checkBox_top_14.setEnabled(False)
        ui.checkBox_top_4.setEnabled(False)
        ui.checkBox_top_3.setEnabled(False)
        ui.checkBox_top_2.setEnabled(False)
        ui.checkBox_top_1.setEnabled(False)
        ui.checkBox_top_8.setChecked(False)
        ui.checkBox_top_9.setChecked(False)
        ui.checkBox_top_6.setChecked(False)
        ui.checkBox_top_7.setChecked(False)
        ui.checkBox_top_10.setChecked(False)
        ui.checkBox_top_11.setChecked(False)
        ui.checkBox_top_5.setChecked(False)
        ui.checkBox_top_12.setChecked(False)
        ui.checkBox_top_13.setChecked(False)
        ui.checkBox_top_14.setChecked(False)
        ui.checkBox_top_4.setChecked(False)
        ui.checkBox_top_3.setChecked(False)
        ui.checkBox_top_2.setChecked(False)
        ui.checkBox_top_1.setChecked(False)
    elif index == 1:
        ui.spinBox_ot.setEnabled(True)
        ui.spinBox_do.setEnabled(True)
        ui.spinBox_ot.setMinimum(1)
        ui.spinBox_do.setMinimum(1)
        ui.spinBox_ot.setProperty("value", 1)
        ui.spinBox_do.setProperty("value", 1)
        ui.checkBox_top_8.setEnabled(False)
        ui.checkBox_top_9.setEnabled(False)
        ui.checkBox_top_6.setEnabled(False)
        ui.checkBox_top_7.setEnabled(False)
        ui.checkBox_top_10.setEnabled(False)
        ui.checkBox_top_11.setEnabled(False)
        ui.checkBox_top_5.setEnabled(False)
        ui.checkBox_top_12.setEnabled(False)
        ui.checkBox_top_13.setEnabled(False)
        ui.checkBox_top_14.setEnabled(False)
        ui.checkBox_top_4.setEnabled(False)
        ui.checkBox_top_3.setEnabled(False)
        ui.checkBox_top_2.setEnabled(False)
        ui.checkBox_top_1.setEnabled(False)
        ui.checkBox_top_8.setChecked(False)
        ui.checkBox_top_9.setChecked(False)
        ui.checkBox_top_6.setChecked(False)
        ui.checkBox_top_7.setChecked(False)
        ui.checkBox_top_10.setChecked(False)
        ui.checkBox_top_11.setChecked(False)
        ui.checkBox_top_5.setChecked(False)
        ui.checkBox_top_12.setChecked(False)
        ui.checkBox_top_13.setChecked(False)
        ui.checkBox_top_14.setChecked(False)
        ui.checkBox_top_4.setChecked(False)
        ui.checkBox_top_3.setChecked(False)
        ui.checkBox_top_2.setChecked(False)
        ui.checkBox_top_1.setChecked(False)
    elif index == 2:
        ui.spinBox_ot.setEnabled(False)
        ui.spinBox_do.setEnabled(False)
        ui.spinBox_ot.setMinimum(0)
        ui.spinBox_do.setMinimum(0)
        ui.spinBox_ot.setProperty("value", 0)
        ui.spinBox_do.setProperty("value", 0)
        ui.checkBox_top_8.setEnabled(True)
        ui.checkBox_top_9.setEnabled(True)
        ui.checkBox_top_6.setEnabled(True)
        ui.checkBox_top_7.setEnabled(True)
        ui.checkBox_top_10.setEnabled(True)
        ui.checkBox_top_11.setEnabled(True)
        ui.checkBox_top_5.setEnabled(True)
        ui.checkBox_top_12.setEnabled(True)
        ui.checkBox_top_13.setEnabled(True)
        ui.checkBox_top_14.setEnabled(True)
        ui.checkBox_top_4.setEnabled(True)
        ui.checkBox_top_3.setEnabled(True)
        ui.checkBox_top_2.setEnabled(True)
        ui.checkBox_top_1.setEnabled(True)
        ui.checkBox_top_8.setChecked(False)
        ui.checkBox_top_9.setChecked(False)
        ui.checkBox_top_6.setChecked(False)
        ui.checkBox_top_7.setChecked(False)
        ui.checkBox_top_10.setChecked(False)
        ui.checkBox_top_11.setChecked(False)
        ui.checkBox_top_5.setChecked(False)
        ui.checkBox_top_12.setChecked(False)
        ui.checkBox_top_13.setChecked(False)
        ui.checkBox_top_14.setChecked(False)
        ui.checkBox_top_4.setChecked(False)
        ui.checkBox_top_3.setChecked(False)
        ui.checkBox_top_2.setChecked(False)
        ui.checkBox_top_1.setChecked(False)
ui.comboBox_customize_the_length.activated[int].connect(customize)

########################################### СБРОСИТЬ НАСТРОЙКИ СЛОВАРЯ ###########################################

def reset_setting():
    ui.textEdit_Console.append('Настройки используемой стратегии успешно сброшены')
    if ui.checkBox_mask.isChecked():
    	ui.checkBox_mask.setEnabled(False)
    	ui.checkBox_mask.setChecked(False)
    	ui.checkBox_mask_alp.setEnabled(False)
    	ui.checkBox_mask_alp.setChecked(False)
    	ui.lineEdit.setEnabled(False)
    	ui.lineEdit.setText("")
    	ui.lineEdit_alp.setEnabled(False)
    	ui.lineEdit_alp.setText("")
    if ui.checkBox_ABC.isChecked():
        ui.checkBox_ABC.setChecked(False)
        ui.comboBox_ABC.setCurrentIndex(0)
        ui.comboBox_ABC.setEnabled(False)
        ui.spinBox_ABC.setEnabled(False)
        ui.spinBox_ABC.setProperty("value", 0)
        ui.lineEdit_ABC.setEnabled(False)
        ui.lineEdit_ABC.clear()
    if ui.checkBox_abc.isChecked():
        ui.checkBox_abc.setChecked(False)
        ui.comboBox_abc.setCurrentIndex(0)
        ui.comboBox_abc.setEnabled(False)
        ui.spinBox_abc.setEnabled(False)
        ui.spinBox_abc.setProperty("value", 0)
        ui.lineEdit_abc.setEnabled(False)
        ui.lineEdit_abc.clear()
    if ui.checkBox_123.isChecked():
        ui.checkBox_123.setChecked(False)
        ui.comboBox_123.setCurrentIndex(0)
        ui.comboBox_123.setEnabled(False)
        ui.spinBox_123.setEnabled(False)
        ui.spinBox_123.setProperty("value", 0)
        ui.lineEdit_123.setEnabled(False)
        ui.lineEdit_123.clear()
    if ui.checkBox_symbols.isChecked():
        ui.checkBox_symbols.setChecked(False)
        ui.comboBox_symbols.setCurrentIndex(0)
        ui.comboBox_symbols.setEnabled(False)
        ui.spinBox_symbols.setEnabled(False)
        ui.spinBox_symbols.setProperty("value", 0)
        ui.lineEdit_symbols.setEnabled(False)
        ui.lineEdit_symbols.clear()
    if not ui.comboBox_customize_the_length.setCurrentIndex(0):
        ui.spinBox_ot.setEnabled(False)
        ui.spinBox_do.setEnabled(False)
        ui.spinBox_ot.setMinimum(0)
        ui.spinBox_do.setMinimum(0)
        ui.spinBox_ot.setProperty("value", 0)
        ui.spinBox_do.setProperty("value", 0)
        ui.checkBox_top_8.setEnabled(False)
        ui.checkBox_top_9.setEnabled(False)
        ui.checkBox_top_6.setEnabled(False)
        ui.checkBox_top_7.setEnabled(False)
        ui.checkBox_top_10.setEnabled(False)
        ui.checkBox_top_11.setEnabled(False)
        ui.checkBox_top_5.setEnabled(False)
        ui.checkBox_top_12.setEnabled(False)
        ui.checkBox_top_13.setEnabled(False)
        ui.checkBox_top_14.setEnabled(False)
        ui.checkBox_top_4.setEnabled(False)
        ui.checkBox_top_3.setEnabled(False)
        ui.checkBox_top_2.setEnabled(False)
        ui.checkBox_top_1.setEnabled(False)
        ui.checkBox_top_8.setChecked(False)
        ui.checkBox_top_9.setChecked(False)
        ui.checkBox_top_6.setChecked(False)
        ui.checkBox_top_7.setChecked(False)
        ui.checkBox_top_10.setChecked(False)
        ui.checkBox_top_11.setChecked(False)
        ui.checkBox_top_5.setChecked(False)
        ui.checkBox_top_12.setChecked(False)
        ui.checkBox_top_13.setChecked(False)
        ui.checkBox_top_14.setChecked(False)
        ui.checkBox_top_4.setChecked(False)
        ui.checkBox_top_3.setChecked(False)
        ui.checkBox_top_2.setChecked(False)
        ui.checkBox_top_1.setChecked(False)
    if not ui.comboBox_mode.setCurrentIndex(0):
        ui.checkBox_alphabet_symbols.setChecked(False)
        ui.checkBox_alphabet_symbols.setEnabled(False)
        ui.checkBox_position_symbols.setChecked(False)
        ui.checkBox_position_symbols.setEnabled(False)
        ui.checkBox_mask.setChecked(False)
        ui.checkBox_mask.setEnabled(False)
        ui.checkBox_mask_alp.setChecked(False)
        ui.checkBox_mask_alp.setEnabled(False)
        ui.spinBox_bigramm.setEnabled(False)
        ui.checkBox_bigramm.setChecked(False)
        ui.checkBox_bigramm.setEnabled(False)
        ui.spinBox_bigramm.setProperty("value", 0)
ui.reset_setting.clicked.connect(reset_setting)

########################################### НАСТРОЙКА РЕЖИМА РАБОТЫ ###########################################

def checkBoxBigramm():
	if ui.checkBox_bigramm.isChecked():
		ui.reset_setting.click()
		ui.comboBox_mode.setCurrentIndex(2)
		ui.checkBox_bigramm.setEnabled(True)
		ui.spinBox_bigramm.setEnabled(True)
		ui.checkBox_bigramm.setChecked(True)
		ui.checkBox_alphabet_symbols.setEnabled(True)
		ui.checkBox_position_symbols.setEnabled(True)
		ui.spinBox_bigramm.valueChanged.connect(spinbox_line)
	else:
		ui.spinBox_bigramm.setEnabled(False)

def spinbox_line():
	if ui.spinBox_bigramm.value() == 1:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('12')
		ui.lineEdit_abc.setText('')
	if ui.spinBox_bigramm.value() == 2:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123')
		ui.lineEdit_abc.setText('')
	if ui.spinBox_bigramm.value() == 3:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_ABC.setChecked(False)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('1239')
		ui.lineEdit_abc.setText('')
	if ui.spinBox_bigramm.value() == 4:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('12394')
		ui.lineEdit_abc.setText('')
	if ui.spinBox_bigramm.value() == 5:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945')
		ui.lineEdit_abc.setText('')
	if ui.spinBox_bigramm.value() == 6:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945')
		ui.lineEdit_abc.setText('er')
	if ui.spinBox_bigramm.value() == 7:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945')
		ui.lineEdit_abc.setText('erw')
	if ui.spinBox_bigramm.value() == 8:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945')
		ui.lineEdit_abc.setText('erwq')
	if ui.spinBox_bigramm.value() == 9:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('1239456')
		ui.lineEdit_abc.setText('erwq')
	if ui.spinBox_bigramm.value() == 10:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('12394560')
		ui.lineEdit_abc.setText('erwq')
	if ui.spinBox_bigramm.value() == 11:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945608')
		ui.lineEdit_abc.setText('erwq')
	if ui.spinBox_bigramm.value() == 12:
		ui.checkBox_123.setChecked(True)
		ui.checkBox_abc.setChecked(True)
		ui.checkBox_abc.setChecked(False)
		ui.checkBox_symbols.setChecked(False)
		ui.lineEdit_123.setText('123945608')
		ui.lineEdit_abc.setText('erwqas')


ui.checkBox_bigramm.clicked.connect(checkBoxBigramm)

def checkBoxMask():
    if ui.checkBox_mask.isChecked():
        ui.comboBox_customize_the_length.setCurrentIndex(0)
        ui.spinBox_ot.setEnabled(False)
        ui.spinBox_do.setEnabled(False)
        ui.spinBox_ot.setMinimum(0)
        ui.spinBox_do.setMinimum(0)
        ui.spinBox_ot.setProperty("value", 0)
        ui.spinBox_do.setProperty("value", 0)
        ui.checkBox_top_8.setEnabled(False)
        ui.checkBox_top_9.setEnabled(False)
        ui.checkBox_top_6.setEnabled(False)
        ui.checkBox_top_7.setEnabled(False)
        ui.checkBox_top_10.setEnabled(False)
        ui.checkBox_top_11.setEnabled(False)
        ui.checkBox_top_5.setEnabled(False)
        ui.checkBox_top_12.setEnabled(False)
        ui.checkBox_top_13.setEnabled(False)
        ui.checkBox_top_14.setEnabled(False)
        ui.checkBox_top_4.setEnabled(False)
        ui.checkBox_top_3.setEnabled(False)
        ui.checkBox_top_2.setEnabled(False)
        ui.checkBox_top_1.setEnabled(False)
        ui.checkBox_top_8.setChecked(False)
        ui.checkBox_top_9.setChecked(False)
        ui.checkBox_top_6.setChecked(False)
        ui.checkBox_top_7.setChecked(False)
        ui.checkBox_top_10.setChecked(False)
        ui.checkBox_top_11.setChecked(False)
        ui.checkBox_top_5.setChecked(False)
        ui.checkBox_top_12.setChecked(False)
        ui.checkBox_top_13.setChecked(False)
        ui.checkBox_top_14.setChecked(False)
        ui.checkBox_top_4.setChecked(False)
        ui.checkBox_top_3.setChecked(False)
        ui.checkBox_top_2.setChecked(False)
        ui.checkBox_top_1.setChecked(False)
        ui.lineEdit.setEnabled(True)
        ui.lineEdit.setText("")
        ui.checkBox_mask_alp.setEnabled(True)
    else:
        ui.lineEdit.setEnabled(False)
        ui.checkBox_mask_alp.setEnabled(False)
        ui.lineEdit.setText("")
        ui.lineEdit_alp.setEnabled(False)
        ui.lineEdit_alp.setText("")
ui.checkBox_mask.clicked.connect(checkBoxMask)

def checkBoxMaskAlp():
	if ui.checkBox_mask_alp.isChecked():
		ui.lineEdit_alp.setEnabled(True)
		ui.lineEdit_alp.setText("")
	else:
		ui.lineEdit_alp.setEnabled(False)
		ui.lineEdit_alp.setText("")
ui.checkBox_mask_alp.clicked.connect(checkBoxMaskAlp)

def mode(index):
	if index == 0:
		ui.checkBox_alphabet_symbols.setChecked(False)
		ui.checkBox_alphabet_symbols.setEnabled(False)
		ui.checkBox_position_symbols.setChecked(False)
		ui.checkBox_position_symbols.setEnabled(False)
		ui.checkBox_bigramm.setChecked(False)
		ui.checkBox_bigramm.setEnabled(False)
		ui.checkBox_mask.setChecked(False)
		ui.checkBox_mask.setEnabled(False)
		ui.checkBox_mask_alp.setChecked(False)
		ui.checkBox_mask_alp.setEnabled(False)
		ui.lineEdit.setEnabled(False)
		ui.lineEdit.setText("")
		ui.lineEdit_alp.setEnabled(False)
		ui.lineEdit_alp.setText("")
		ui.spinBox_bigramm.setEnabled(False)
		ui.spinBox_bigramm.setProperty("value", 0)
		ui.lineEdit_ABC.setText('')
		ui.lineEdit_abc.setText('')
		ui.lineEdit_123.setText('')
		ui.lineEdit_symbols.setText('')
	if index == 1:
		ui.checkBox_alphabet_symbols.setChecked(False)
		ui.checkBox_alphabet_symbols.setEnabled(False)
		ui.checkBox_position_symbols.setChecked(False)
		ui.checkBox_position_symbols.setEnabled(False)
		ui.checkBox_bigramm.setChecked(False)
		ui.checkBox_bigramm.setEnabled(False)
		ui.checkBox_mask.setChecked(False)
		ui.checkBox_mask.setEnabled(True)
		ui.lineEdit.setEnabled(False)
		ui.lineEdit.setText("")
		ui.spinBox_bigramm.setEnabled(False)
		ui.spinBox_bigramm.setProperty("value", 0)
		ui.lineEdit_ABC.setText('')
		ui.lineEdit_abc.setText('')
		ui.lineEdit_123.setText('')
		ui.lineEdit_symbols.setText('')
	if index == 2:
		ui.checkBox_alphabet_symbols.setChecked(False)
		ui.checkBox_alphabet_symbols.setEnabled(True)
		ui.checkBox_position_symbols.setChecked(False)
		ui.checkBox_position_symbols.setEnabled(True)
		ui.checkBox_bigramm.setChecked(False)
		ui.checkBox_bigramm.setEnabled(True)
		ui.checkBox_mask.setChecked(False)
		ui.checkBox_mask.setEnabled(False)
		ui.lineEdit.setEnabled(False)
		ui.lineEdit.setText("")
		ui.spinBox_bigramm.setEnabled(False)
		ui.spinBox_bigramm.setProperty("value", 0)
		ui.lineEdit_ABC.setText('')
		ui.lineEdit_abc.setText('')
		ui.lineEdit_123.setText('')
		ui.lineEdit_symbols.setText('')
ui.comboBox_mode.activated[int].connect(mode)


sys.exit(app.exec_())